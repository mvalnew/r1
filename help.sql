-- phpMyAdmin SQL Dump
-- version 4.4.15.5
-- http://www.phpmyadmin.net
--
-- Хост: 127.0.0.1:3306
-- Время создания: Май 05 2016 г., 16:46
-- Версия сервера: 5.5.48
-- Версия PHP: 5.3.29

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `help`
--

-- --------------------------------------------------------

--
-- Структура таблицы `sections`
--

CREATE TABLE IF NOT EXISTS `sections` (
  `sectionid` int(10) unsigned NOT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `name` char(50) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=123 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `sections`
--

INSERT INTO `sections` (`sectionid`, `parent`, `name`) VALUES
(12, NULL, 'Администрирование  MySQL'),
(100, NULL, 'JavaScript'),
(101, 100, 'Введение'),
(102, 100, 'Лексическая структура'),
(103, 100, 'Типы, значения и переменные'),
(104, 100, 'Выражения и операторы'),
(105, 100, 'Инструкции'),
(106, 100, 'Объекты'),
(107, 100, 'Массивы'),
(108, 100, 'Функции'),
(109, 100, 'Классы и модули'),
(110, 100, 'Шаблоны и регулярные выражения'),
(111, 100, 'Подмножества и расширения JavaScript'),
(112, 100, 'Серверный JavaScript'),
(113, 100, 'JavaScript в браузерах'),
(114, 100, 'Объект Window'),
(115, 100, 'Работа с документами'),
(116, 100, 'CSS'),
(117, 100, 'События'),
(118, 100, 'Работа с HTTP'),
(119, 100, 'jQuery'),
(120, 100, 'Сохранение данных на стороне клиента'),
(121, 100, 'Графика и медиа на стороне клиента'),
(122, 100, 'Прикладные интерфейсы HTML5');

-- --------------------------------------------------------

--
-- Структура таблицы `topics`
--

CREATE TABLE IF NOT EXISTS `topics` (
  `topicid` int(10) unsigned NOT NULL,
  `sectionid` int(10) unsigned NOT NULL,
  `name` char(50) NOT NULL,
  `content` text
) ENGINE=InnoDB AUTO_INCREMENT=142 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `topics`
--

INSERT INTO `topics` (`topicid`, `sectionid`, `name`, `content`) VALUES
(1, 12, 'Полномочия', '<p>Команда GRANT</p>'),
(2, 12, 'Безопасность', '<p>Опасно запускать MySQL от имени суперпользователя. Надо создать пользователя MySQL специально для запуска MySQL.</p>'),
(101, 101, 'Базовый JS', '<h3>Лексическая структура</h3>\r\n\r\n<p>- основные лексические конструкции (комментарии, точки с запятой, символы Юникода).</p>\r\n\r\n<h3>Типы данных, значения и переменные</h3>\r\n\r\n<p><span style="color:#006400">// Все, что следует за двумя символами слэша, является комментарием.<br />\r\n// Внимательно читайте комментарии: они описывают программный код JavaScript.<br />\r\n// Переменная - это символическое имя некоторого значения.<br />\r\n// Переменные объявляются с помощью ключевого слова var:</span><br />\r\nvar x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color:#006400">// Объявление переменной с именем х.</span><br />\r\n<span style="color:#006400">// Присваивать значения переменным можно с помощью знака =</span><br />\r\nх = 0;<span style="color:#006400"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // Теперь переменная х имеет значение 0</span><br />\r\nх&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 0: В выражениях имя переменной замещается ее значением.<br />\r\n<strong>// JavaScript поддерживает значения различных типов :</strong></span><br />\r\nх = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Числа</span>.<br />\r\nх = 0.01;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Целые и вещественные числа представлены одним типом.</span><br />\r\nх = &quot;hello world&quot;; <span style="color:#006400">// Строки текста в кавычках.</span><br />\r\nх = &#39;JavaScript&#39;; &nbsp; <span style="color:#006400">// Строки можно также заключать в апострофы</span>.<br />\r\nх = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Логические значения.</span><br />\r\nх = false;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Другое логическое значение.</span><br />\r\nх = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// null - особое значение, обозначающее &quot;нет значения&quot;.</span><br />\r\nх = undefined; <span style="color:#006400">// Значение undefined подобно значению null</span></p>\r\n\r\n<h3>Объекты и массивы</h3>\r\n\r\n<p><span style="color:#006400">// Наиболее важным типом данных в JavaScript являются объекты.<br />\r\n// Объект - это коллекция пар имя/значение или отображение строки в значение.</span><br />\r\nvar book = {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Объекты заключаются в фигурные скобки.</span><br />\r\n&nbsp;&nbsp;&nbsp; topic: &quot;JavaScript&quot;&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Свойство &quot;topic&quot; имеет значение &quot;JavaScript&quot;.</span><br />\r\n&nbsp;&nbsp;&nbsp; fat: true &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color:#006400">// Свойство &quot;fat&quot; имеет значение true.</span><br />\r\n};<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Фигурная скобка отмечает конец объекта.</span><br />\r\n<span style="color:#006400">// Доступ к свойствам объектов выполняется с помощью . или []:</span><br />\r\nbook.topic&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; &quot;JavaScript&quot;</span><br />\r\nbook[&quot;fat&quot;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; true: другой способ получить значение свойства.</span><br />\r\nbook.author = &quot;Flanagan&quot;;<span style="color:#006400"> // Создать новое свойство присваиванием.</span><br />\r\nbook.contents = {};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// {} - пустой объект без свойств.</span><br />\r\n<span style="color:#006400">// JavaScript поддерживает массивы (списки с числовыми индексами) значений:</span><br />\r\nvar primes = [2, 3, 5, 7]; <span style="color:#006400">// Массив из 4 значений, ограничивается [ и ].</span><br />\r\nprimes[0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 2: первый элемент (с индексом 0) массива,</span><br />\r\nprimes.length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 4: количество элементов в массиве.</span><br />\r\nprimes[primes.length-1] <span style="color:#006400">// =&gt; 7: последний элемент массива.</span><br />\r\nprimes[4] = 9;<span style="color:#006400"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Добавить новый элемент присваиванием.</span><br />\r\nprimes[4] = 11;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Или изменить значение имеющегося элемента.</span><br />\r\nvar empty = [];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // [] - пустой массив без элементов.</span><br />\r\nempty.length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 0</span><br />\r\n<span style="color:#006400">// Массивы и объекты могут хранить другие массивы и объекты:</span><br />\r\nvar points := [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Массив с 2 элементами.</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {x:0, у:0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Каждый элемент - это объект.</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {x:1, у:1}<br />\r\n];<br />\r\nvar data = {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Объект с 2 свойствами</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trial1: [[1.2], [3.4]]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Значение каждого свойства - это массив.</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trial2: [[2,3], [4,5]]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400">&nbsp; // Элементами массива являются массивы.</span><br />\r\n};</p>\r\n\r\n<h3>Операторы</h3>\r\n\r\n<p><span style="color:#006400">// Операторы выполняют действия со значениями (операндами) и воспроизводят<br />\r\n// новое значение. Наиболее часто используемыми являются арифметические операторы:</span><br />\r\n3+2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // =&gt; 5: сложение<br />\r\n3-2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // =&gt; 1: вычитание<br />\r\n3*2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 6: умножение<br />\r\n3/2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 1.5: деление<br />\r\npoints[1].x - points[0].x // =&gt; 1: можно использовать более сложные операнды<br />\r\n&quot;3&quot; + &quot;2&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;32&quot;: + складывает числа, объединяет строки<br />\r\n<span style="color:#006400">// В JavaScript имеются некоторые сокращенные формы арифметических операторов</span><br />\r\nvar count = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Объявление переменной<br />\r\ncount++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Увеличение значения переменной на 1<br />\r\ncount--;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Уменьшение значения переменной на 1<br />\r\ncount += 2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Добавить 2: то же, что count = count + 2;<br />\r\ncount *= 3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Умножить на 3: то же, что count = count * 3;<br />\r\ncount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 6: имена переменных сами являются выражениями<br />\r\n<span style="color:#006400">// Операторы сравнения позволяют проверить два значения на равенство<br />\r\n// или неравенство, выяснить, какое значение меньше или больше, и т. д.<br />\r\n// Они возвращают значение true или false.</span><br />\r\nvar x = 2, у = 3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Знаки = выполняют присваивание, а не сравнение<br />\r\nх == у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; false: равенство<br />\r\nх != у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: неравенство<br />\r\nх &lt; у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: меньше<br />\r\nх &lt;= у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: меньше или равно<br />\r\nх &gt; у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; false: больше<br />\r\nх &gt;= у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; false: больше или равно<br />\r\n&quot;two&quot; == &quot;three&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; false: две разных строки</p>\r\n\r\n<h3>Инструкции и выражения</h3>\r\n\r\n<p>Выражения - вычисляют значения, выражения - изменяют состояние.<br />\r\nИнструкции заканчиваются <strong>точкой с запятой</strong>.</p>\r\n\r\n<h3>Функции</h3>\r\n\r\n<p><span style="color:#006400">// Функции - это параметризованные блоки программного кода JavaScript,<br />\r\n// которые можно вызывать многократно.</span><br />\r\nfunction plus1(x) {&nbsp;&nbsp; // Определить функцию с именем &quot;plusl&quot; и с параметром &quot;х&quot;<br />\r\n&nbsp;&nbsp;&nbsp; return х+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Вернуть значение на 1 больше полученного<br />\r\n} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // Функции заключаются в фигурные скобки<br />\r\nplus1(у)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 4: у имеет значение 3, поэтому этот вызов вернет 3+1<br />\r\nvar square = function(x) { // Функции можно присваивать переменным<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x*x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Вычислить значение функции<br />\r\n};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Точка с запятой отмечает конец присваивания.<br />\r\nsquare(plus1(y))&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 16: вызов двух функций в одном выражении</p>\r\n\r\n<h3>Методы</h3>\r\n\r\n<p><span style="color:#006400">// Функции, присвоенные свойствам объектов, называются методами.<br />\r\n// Все объекты в JavaScript имеют методы:</span><br />\r\nvar a = []; // Создать пустой массив<br />\r\na.push(1,2,3); // Метод push() добавляет элементы в массив<br />\r\na.reverse(); // Другой метод: переставляет элементы в обратном порядке</p>\r\n\r\n<p><span style="color:#006400">// Можно определять собственные методы. Ключевое слово &quot;this&quot; ссылается на объект,<br />\r\n// в котором определен метод: в данном случае на массив points,</span><br />\r\npoints.dist = function() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Метод вычисления расстояния между точками<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var р1 = this[0];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Первый элемент массива, относительно которого вызван метод<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var p2 = this[1]; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Второй элемент объекта &quot;this&quot;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var a = р2.х-р1.х;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Разность координат X<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var b = p2.y-p1.y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Разность координат Y<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return Math.sqrt(a*a +&nbsp;&nbsp; // Теорема Пифагора<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; b*b);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Math.sqrt( ) вычисляет корень квадратный<br />\r\n};<br />\r\npoints.dist()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 1.414: расстояние между 2-мя точками</p>\r\n\r\n<h3>Управляющие инструкции</h3>\r\n\r\n<p><span style="color:#006400">// В JavaScript имеются условные инструкции и инструкции циклов, синтаксически<br />\r\n// похожие на аналогичные инструкции С, C++, Java и в других языках.</span><br />\r\nfunction abs(x) {&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Функция, вычисляющая абсолютное значение</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; <strong>if</strong> (x &gt;= 0) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; <strong>else </strong>{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return -x;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n}</p>\r\n\r\n<p>function factorial(n) { &nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Функция, вычисляющая факториал</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var product = 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; <strong>while</strong>(n &gt; 1) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; product *= n;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; n&mdash;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return product;<br />\r\n}</p>\r\n\r\n<p>factorial(4)&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 24: 1*4*3*2</span></p>\r\n\r\n<p>function factorial2(n) {&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Другая версия, использующая другой цикл</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var i, product = 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; <strong>for</strong>(i=2; i &lt;= n; i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; product *= i;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return product;<br />\r\n}<br />\r\nfactorial2(5)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 120: 1*2*3*4*5</span></p>\r\n\r\n<h3>ООП</h3>\r\n\r\n<p><span style="color:#006400">// Определение функции-конструктора для инициализации нового объекта Point</span><br />\r\nfunction Point(x.y) { &nbsp; // По соглашению имя конструкторов начинается с заглавного символа<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; this.x = х; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; // this - ссылка на инициализируемый объект<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; this.у = у; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; // Сохранить аргументы в свойствах объекта<br />\r\n} &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Ничего возвращать не требуется<br />\r\n<span style="color:#006400">// Чтобы создать новый экземпляр, необходимо вызвать функцию-конструктор<br />\r\n// с ключевым словом &quot;new&quot;</span><br />\r\nvar p = new Point(1, 1); // Точка на плоскости с координатами (1,1)<br />\r\n<span style="color:#006400">// Методы объектов Point определяются за счет присваивания функций свойствам<br />\r\n// объекта-прототипа, ассоциированного с функцией-конструктором.</span><br />\r\nPoint.prototype.г = function() {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return Math.sqrt( &nbsp;&nbsp;&nbsp;&nbsp; // Вернуть корень квадратный от х? + у7<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; this.x * this.x +&nbsp;&nbsp; // this - это объект Point, относительно которого...<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; this.у * this.у &nbsp;&nbsp;&nbsp;&nbsp; // ...вызывается метод.<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; );<br />\r\n};<br />\r\n<span style="color:#006400">// Теперь объект р типа Point (и все последующие объекты Point) наследует метод г()</span><br />\r\nр.г() &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // =&gt; 1.414...</p>\r\n\r\n<p>&nbsp;</p>'),
(102, 101, 'Клиентский JS', '<h3>Встраивание в HTML-файлы</h3>\r\n\r\n<p><span style="color:#8B4513">\r\n&lt;head&gt;<br />\r\n&lt;script src=&quot;library. js&quot;&#39;x/script&gt; &lt;!-- подключить библиотеку JavaScript --&gt;<br />\r\n&lt;/head&gt;<br />\r\n&lt;body&gt;<br />\r\n&lt;р&gt;Это абзац HTML&lt;/p&gt;<br />\r\n&lt;script&gt;<br />\r\n// Это некоторый программный код на клиентском JavaScript,<br />\r\n// встроенный непосредственно в HTML-файл<br />\r\n&lt;/script&gt;<br />\r\n&lt;р&gt;Далее опять следует разметка HTML.&lt;/p&gt;<br />\r\n&lt;/body&gt;<br /></p>\r\n\r\n<h3>Объект Window</h3>\r\n\r\n<p>&lt;script&gt;<br />\r\nfunction moveon() {<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Вывести модальный диалог, чтобы получить ответ пользователя</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var answer = confirm(&quot;Ready to move on?&quot;);<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Если пользователь щелкнул на кнопке &quot;OK&quot;, заставить броузер загрузить новую страницу</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; if (answer) window.location = &quot;http://google.com&quot;;<br />\r\n}<br />\r\n<span style="color:#006400">// Запустить функцию, объявленную выше, через 1 минуту (60000 миллисекунд).</span><br />\r\nsetTimeout(moveon, 60000);<br />\r\n&lt;/script&gt;</p>\r\n\r\n<h3>Управление содержимым документа HTML</h3>\r\n\r\n<p><span style="color:#006400">// Выводит сообщение в специальной области для отладочных сообщений внутри документа.<br />\r\n// Если документ не содержит такой области, она создается,</span><br />\r\nfunction debug(msg) {<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Отыскать область для отладочных сообщений в документе, поиск по HTML-атрибуту id<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; </span> var log = document.getElementById(&quot;debuglog&quot;);<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Если элемент с атрибутом id=&quot;debuglog&quot; отсутствует, создать его.<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; </span> if (!log) {<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> log = document.createElement(&quot;div&quot;); // Создать элемент &lt;div&gt;<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> log.id = &quot;debuglog&quot;; // Установить атрибут id<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> log.innerHTML = &quot;&lt;h1&gt;Debug Log&lt;/h1&gt;&quot;; // Начальное содержимое<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> document.body.appendChild(log); // Добавить в конец документа<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> }<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Теперь обернуть сообщение в теги &lt;рге&gt; и добавить в элемент log<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; </span> var pre = document.createElement(&#39;&quot;pre&quot;); // Создать тег &lt;рге&gt;<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> var text = document.createTextNode(msg); // Обернуть msg в текстовый узел<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> pre.appendChild(text); // Добавить текст в тег &lt;рге&gt;<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> log.appendChild(pre); // Добавить &lt;рге&gt; в элемент log<br />\r\n}</p>\r\n\r\n<h3>Манипуляция CSS</h3>\r\n\r\n<p>function hide(e, reflow) { <span style="color:#006400">// Скрывает элемент е, изменяя его стиль</span><br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> if (reflow) { // Если 2-й аргумент true,<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> е.style.display = &quot;none&quot; // скрыть элемент и использовать<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> } // занимаемое им место<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> else { // Иначе<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> е.style.visibility = &quot;hidden&quot;; // сделать е невидимым, но оставить<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span>} // занимаемое им место пустым<br />\r\n}<br />\r\nfunction highlight(e) { <span style="color:#006400">// Выделяет е, устанавливая класс CSS</span><br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Просто добавляет или переопределяет HTML-атрибут class.<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; // Предполагается, что таблица стилей CSS уже содержит определение класса &quot;hilite&quot;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; </span> if (!e.className) e.className = &quot;hilite&quot;;<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> else e.className += &quot; hilite&quot;;<br />\r\n}</p>\r\n\r\n<p>&nbsp;</p>'),
(103, 102, 'Набор символов', '<ul>\r\n	<li>Используется Юникод.</li>\r\n	<li>Чувствительность к регистру.</li>\r\n	<li>Игнорирование пробелов и переводов строк (кроме как между лексемами).<br />\r\n	Их можно использовать для формирования удобочитаемого вида.</li>\r\n</ul>'),
(104, 102, 'Комментарии', '<p>// Это однострочный комментарий.<br />\r\n/* Это тоже комментарий */ // а это другой комментарий.<br />\r\n/*<br />\r\n* Это еще один комментарий.<br />\r\n* Он располагается в нескольких строках.<br />\r\n*/</p>'),
(105, 102, 'Литералы', '<p>Литерал - это значение, указанное непосредственно в тексте программы.</p>\r\n\r\n<p>12&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Число двенадцать<br />\r\n1.2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Число одна целая две десятых<br />\r\n&#39;&quot;hello world&quot;&nbsp; // Строка текста<br />\r\n&quot;Hi&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Другая строка<br />\r\ntrue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Логическое значение<br />\r\nfalse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Другое логическое значение<br />\r\n/javascript/gi&nbsp;&nbsp; // Литерал &quot;регулярного выражения&quot; (для поиска по шаблону)<br />\r\nnull&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Пустой объект<br />\r\n{ х:1, у:2 }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Инициализатор объекта<br />\r\n[1,2,3,4,5]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Инициализатор массива</p>\r\n\r\n<p>&nbsp;</p>'),
(106, 102, 'Идентификаторы и зарезервированные слова', '<ul>\r\n	<li>Начинаются с буквы, _, $</li>\r\n	<li>Буквы могут быть любого языка</li>\r\n	<li>Зарезервированные слова не могут быть иденификаторами</li>\r\n</ul>'),
(107, 102, 'Необязательные точки с запятой', '<p>Точку с запятой можно не ставить</p>\r\n\r\n<ul>\r\n	<li>если инструкции на разных строках<br />\r\n	(и эти строки невозможно представить как единую инструкцию :<br />\r\n	т.е. инструкция продлевается как можно дальше,<br />\r\n	исключение - return, break, continue, ++, --).</li>\r\n	<li>после закрывающей фигурной скобки.</li>\r\n</ul>'),
(108, 103, 'Числа', '<ul>\r\n	<li><strong>Нет деления на целые и вещественные</strong>: все вещественные (16 знаков)</li>\r\n	<li><strong>+ - Infinity </strong>- если результат выходит за пределы представимых значений</li>\r\n	<li><strong>Деление на ноль</strong> не является ошибкой (результат Infinity)</li>\r\n	<li>При <strong>делении нуля на ноль</strong> возвращается <strong>NaN </strong>(не-число)</li>\r\n</ul>\r\n\r\n<h3>Дата и время</h3>\r\n\r\n<p>var then = new Date(2010, 0, 1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Первый день первого месяца 2010 года<br />\r\nvar later = new Date(2010, 0, 1, 17, 10, 30); // Та же дата, в 17:10:30 локального времени<br />\r\nvar now = new Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Текущие дата и время<br />\r\nvar elapsed = now - then;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Разность дат: интервал в миллисекундах<br />\r\nlater.getFullYear()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 2010<br />\r\nlater.getMonth()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 0: счет месяцев начинается с нуля<br />\r\nlater.getDate()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 1: счет дней начинается с единицы<br />\r\nlater. getDay()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 5: день недели. 0 - воскр., 5 - пятн.<br />\r\nlater.getHours()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 17: 17 часов локального времени<br />\r\nlater. getUTCHours()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // часы по UTC; зависит от часового пояса<br />\r\nlater. toString()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;Fri Jan 01 2010 17:10:30 GMT+0300&quot;<br />\r\nlater.toUTCString()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;Fri, 01 Jan 2010 14:10:30 GMT&quot;<br />\r\nlater. toLocaleDateString()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;1 Январь 2010 г.&quot;<br />\r\nlater. toLocaleTimeString()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;17:10:30&quot;<br />\r\nlater. toISOString()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;2010-01-01T14:10:30.000Z&quot;</p>\r\n\r\n<p>&nbsp;</p>'),
(109, 103, 'Текст', '<ul>\r\n	<li>&quot;Строка&quot;</li>\r\n	<li>&#39;Строка&#39;</li>\r\n	<li>Многострочная строка - с обратным слешем  в конце</li>\r\n	<li>+ конкатенация</li>\r\n</ul>\r\n\r\n<h3>Методы строк</h3>\r\n\r\n<table border="0" cellpadding="1" cellspacing="1" style="height:300px; width:600px">\r\n	<tbody>\r\n		<tr>\r\n			<td>var s = &quot;hello, world&quot;</td>\r\n			<td>// Начнем с того же текста.</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.charAt(0)</td>\r\n			<td>// =&gt; &quot;h&quot; : первый символ</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.charAt(s.length-1)</td>\r\n			<td>// =&gt; &quot;d&quot; : последний символ</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.substring(1,4)</td>\r\n			<td>// =&gt; &quot;ell&quot; : 1-3 символы</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.slice(1,4)</td>\r\n			<td>// =&gt; &quot;ell&quot; : то же</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.slice(-3)</td>\r\n			<td>// =&gt; &quot;rld&quot; : последние 3</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.indexOf(&quot;l&quot;)</td>\r\n			<td>// =&gt; 2 :&nbsp; нахождение первого вхождения символа</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.lastlndex0f(&quot;l&quot;)</td>\r\n			<td>// =&gt; 10 :&nbsp; нахождение последнего вхождения символа</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.indexOf(&quot;l&quot;, 3)</td>\r\n			<td>// =&gt; 3 :&nbsp; нахождение со смещением начала поиска</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.split(&quot;, &quot;)</td>\r\n			<td>// =&gt; [&quot;hello&quot;, &quot;world&quot;] : разбиение на подстроки</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.replace(&quot;h&quot;, &quot;H&quot;)</td>\r\n			<td>// =&gt; &quot;Hello, world&quot; : замена</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s.toUpperCase()</td>\r\n			<td>// =&gt; &quot;HELLO, WOLD&quot;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s[0]</td>\r\n			<td>// =&gt; &quot;h&quot; : Индексация</td>\r\n		</tr>\r\n		<tr>\r\n			<td>s[s.length-1]</td>\r\n			<td>// =&gt; &quot;d&quot;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>Сопоставление с шаблоном</h3>\r\n\r\n<p>Литералы регулярных выражений (текст между слешами)<br />\r\n/^HTML/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Соответствует символам Н Т М L в начале строки<br />\r\n/[1-9][0-9]*/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Соответствует цифре, кроме нуля, за которой следует любое число цифр<br />\r\n/javascript/i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Соответствует подстроке &quot;javascript&quot;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // как отдельному слову, учитывает регистр символов<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // за вторым слешем следует модификатор</p>\r\n\r\n<p>var text = &quot;testing: 1, 2, 3&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Образец текста<br />\r\nvar pattern = /d+/g &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Соответствует всем вхождениям одной или более цифр<br />\r\npattern.test(text)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: имеется совпадение<br />\r\ntext.search(pattern)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 9: позиция первого совпадения<br />\r\ntext.match(pattern)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]: массив всех совпадений<br />\r\ntext.replace(pattern, &quot;#&quot;); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // =&gt; &quot;testing: #, #, #&quot;<br />\r\ntext.split(/D+/);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; [&quot;&quot;,&quot;1&quot;,&quot;2&quot;,&quot;3&#39;&quot;]: разбить по нецифровым символам</p>\r\n\r\n<p>&nbsp;</p>'),
(110, 103, 'Логические значения', '<ul>\r\n	<li>true, false</li>\r\n	<li>undefined, null, 0, NaN, &quot;&quot; преобразуются в false</li>\r\n</ul>'),
(111, 103, 'null и undefined', '<ul>\r\n	<li><strong>null </strong>- означает отсутствие значения</li>\r\n	<li>null является спец.объектом</li>\r\n	<li><strong>undefined </strong>- полное отсутствие какого-либо значения</li>\r\n	<li>undefined - имя предопределенной глобальной переменной</li>\r\n</ul>'),
(112, 103, 'Глобальный объект', '<ul>\r\n	<li>Свойства этого объекта доступны из любого места программы</li>\r\n	<li>При загрузке новой страницы создается новый глобальный объект</li>\r\n	<li>Инициализирует начальный набор свойств определяющих\r\n	<ul>\r\n		<li>глобальные свойства (undefined, Infinity, NaN, ...)</li>\r\n		<li>глобальные функции (isNaN(), parseInt(), eval(), ...)</li>\r\n		<li>функции-конструкторы (Date(), RegExp(), String(), Object(), Array(), ...)</li>\r\n		<li>глобальные объекты (Math, JSON, ...)</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>this </strong>- ссылка на глоб.объект (в коде верхнего уровня)</li>\r\n	<li><strong>Window </strong>- гл.об. для окна браузера (свойство <strong>window </strong>- ссылка на себя)</li>\r\n	<li>глобальные переменные объявленные в программе становятся свойствами глобального объекта.</li>\r\n</ul>'),
(113, 103, 'Объекты-обертки', '<ul>\r\n	<li>Для того, что бы можно было использовать свойства строк, при попытке обращения к свойству строки она преобразовывается в объект <strong>String</strong>. После использования объект <strong>String</strong> уничтожается.</li>\r\n	<li>Для чисел - <strong>Number</strong>.</li>\r\n	<li>Для логики - <strong>Boolean</strong>.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>'),
(114, 103, 'Неизменяемые простые значения и ссылки на объекты', '<ul>\r\n	<li><strong>Простые значения</strong> (строки, числа, логич.знач., null, undefined) - неизменяемы.</li>\r\n	<li>Простые значения сравниваются <strong>по значению</strong>, объекты - <strong>по ссылке</strong>.</li>\r\n	<li><strong>Объеты </strong>( в т.ч. массивы и функции)&nbsp; - изменяемы</li>\r\n</ul>'),
(115, 103, 'Преобразование типов', '<table border="1" cellpadding="1" cellspacing="0" style="width:800px">\r\n	<tbody>\r\n		<tr>\r\n			<td colspan="1" rowspan="2" style="text-align:center"><strong><span style="font-size:14px">Значение</span></strong></td>\r\n			<td colspan="4" rowspan="1" style="text-align:center"><strong><span style="font-size:14px">Преобразование в :</span></strong></td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><strong><span style="font-size:14px">Строку</span></strong></td>\r\n			<td style="text-align:center"><strong><span style="font-size:14px">Число</span></strong></td>\r\n			<td style="text-align:center"><strong><span style="font-size:14px">Логическое<br />\r\n			значение</span></strong></td>\r\n			<td style="text-align:center"><strong><span style="font-size:14px">Объект</span></strong></td>\r\n		</tr>\r\n		<tr>\r\n			<td>undefined</td>\r\n			<td>&quot;undefined&quot;</td>\r\n			<td>NaN</td>\r\n			<td>false</td>\r\n			<td>TypeError</td>\r\n		</tr>\r\n		<tr>\r\n			<td>null</td>\r\n			<td>&quot;null&quot;</td>\r\n			<td>0</td>\r\n			<td>false</td>\r\n			<td>TypeError</td>\r\n		</tr>\r\n		<tr>\r\n			<td>true<br />\r\n			false</td>\r\n			<td>&quot;true&quot;<br />\r\n			&quot;false&quot;</td>\r\n			<td>1<br />\r\n			0</td>\r\n			<td>&nbsp;</td>\r\n			<td>new Boolean(true)<br />\r\n			new Boolean(false)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&quot;&quot; (пустая строка)<br />\r\n			&quot;1.2&quot; (непустая строка, число)<br />\r\n			&quot;one&quot; (непустая строка, не число)</td>\r\n			<td>&nbsp;</td>\r\n			<td>0<br />\r\n			1.2<br />\r\n			NaN</td>\r\n			<td>false<br />\r\n			true<br />\r\n			true</td>\r\n			<td>new String(&quot;&quot;)<br />\r\n			new String(&quot;1.2&quot;)<br />\r\n			new String(&quot;one&quot;)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>0<br />\r\n			-0<br />\r\n			NaN<br />\r\n			Infinity<br />\r\n			-Infinity<br />\r\n			1 (конечное, не нулевое)</td>\r\n			<td>&quot;0&quot;<br />\r\n			&quot;0&quot;<br />\r\n			&quot;NaN&quot;<br />\r\n			&quot;Infinity&quot;<br />\r\n			&quot;-Infinity&quot;<br />\r\n			&quot;1&quot;</td>\r\n			<td>&nbsp;</td>\r\n			<td>false<br />\r\n			false<br />\r\n			false<br />\r\n			true<br />\r\n			true<br />\r\n			true</td>\r\n			<td>new Number(0)<br />\r\n			new Number(-0)<br />\r\n			new Number(NaN)<br />\r\n			new Number(Ifinity)<br />\r\n			new Number(-Infinity)<br />\r\n			new Number(1)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>{ } (любой объект)<br />\r\n			[ ] (пустой массив)<br />\r\n			[9] (1 числовой элемент)<br />\r\n			[&#39;a&#39;] (любой другой массив)<br />\r\n			function(){ } (любая функция)</td>\r\n			<td>пр.в пр.зн.<br />\r\n			&quot;&quot;<br />\r\n			&quot;9&quot;<br />\r\n			исп.метод join()<br />\r\n			пр.в пр.зн.</td>\r\n			<td>пр.в пр.зн.<br />\r\n			0<br />\r\n			9<br />\r\n			NaN<br />\r\n			NaN</td>\r\n			<td>false<br />\r\n			false<br />\r\n			false<br />\r\n			true<br />\r\n			true</td>\r\n			<td>&nbsp;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<h3>Преобразование и равенство</h3>\r\n\r\n<p>null == undefined &nbsp;&nbsp; // Эти два значения считаются равными.<br />\r\n&quot;0&quot; == 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Перед сравнением строка преобразуется в число.<br />\r\n0 == false&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Перед сравнением логич. значение преобразуется в число.<br />\r\n&quot;0&quot; == false&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Перед сравнением оба операнда преобразуются в числа.</p>\r\n\r\n<p>оператор == никогда не пытается преобразовать свои операнды в логические значения.</p>\r\n\r\n<h3>Явные преобразования</h3>\r\n\r\n<p><strong>Функции-обертки без new :</strong></p>\r\n\r\n<p>Number(&quot;3&quot;) &nbsp; &nbsp; &nbsp;&nbsp; // =&gt; 3<br />\r\nString(false)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;false&quot; или можно использовать false.toStringO<br />\r\nBoolean([])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true<br />\r\n0bject(3)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; new Number(3)</p>\r\n\r\n<p><strong>Некоторые операторы:</strong></p>\r\n\r\n<p>х + &quot;&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // То же, что и String(x)<br />\r\n+х&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // То же, что и Number(х). Можно также встретить х-0<br />\r\n!!х&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // То же, что и Boolean(x). Обратите внимание на два знака !</p>\r\n\r\n<p><strong>Преобразование чисел в строки с округлением:</strong></p>\r\n\r\n<p>var n = 123456.789;<br />\r\nn.toFixed(0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &quot;123457&quot;<br />\r\nn.toFixed(2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &quot;123456.79&quot;<br />\r\nn.toFixed(5);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &quot;123456.78900&quot;<br />\r\nn.toExponential(1);&nbsp;&nbsp;&nbsp; // &quot;1.2e+5&quot;<br />\r\nn.toExponential(3);&nbsp;&nbsp; // &quot;1.235e+5&quot;<br />\r\nn.toPrecision(4);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &quot;1.235e+5&quot;<br />\r\nn.toPrecision(7);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // &quot;123456.8&quot;<br />\r\nn.toPrecision(10);&nbsp;&nbsp;&nbsp;&nbsp; // &quot;123456.7890&quot;</p>\r\n\r\n<p><strong>Преобразование строк в числа:</strong></p>\r\n\r\n<p>parselnt(&quot;3 blind mice&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 3<br />\r\nparseFloat(&quot; 3.14 meters&quot;)&nbsp;&nbsp; // =&gt; 3.14<br />\r\nparselnt(&quot;-12.34&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // =&gt; -12<br />\r\nparseInt(&quot;0xFF&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 255<br />\r\nparselnt(&quot;0xff&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 255<br />\r\nparseInt(&quot;-0XFF&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; -255<br />\r\nparseFloat(&quot;.1&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 0.1<br />\r\nparselnt(&quot;0.1&quot;) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // =&gt; 0<br />\r\nparselnt(&quot;.1&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; NaN: целые числа не могут начинаться с &quot;.&quot;<br />\r\nparseFloat(&quot;$72.47&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; NaN: числа не могут начинаться с &quot;$&quot;</p>\r\n\r\n<p><strong>с основанием:</strong></p>\r\n\r\n<p>parselnt(&quot;11&quot;, 2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 3 (1*2 + 1)<br />\r\nparselnt(&quot;ff&quot;, 16); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 255 (15*16 + 15)<br />\r\nparselnt(&quot;zz&quot;, 36);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 1295 (35*36 + 35)<br />\r\nparselnt(&quot;077&quot;, 8);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 63 (7*8 + 7)<br />\r\nparselnt(&quot;077&quot;, 10);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 77 (7*10 + 7)</p>\r\n\r\n<h3><strong>Преобразование объектов в простые значения</strong></h3>\r\n\r\n<ul>\r\n	<li>В <strong>логические </strong>- все в true</li>\r\n	<li>метод toString() - в <strong>строку</strong></li>\r\n	<li>метод <strong>valueOf()</strong> - преобразование объекта в представляющее его простое значение, если оно существует (по умолчанию - сам объект)</li>\r\n</ul>\r\n\r\n<p><strong>Преобразование объектов в строку:</strong></p>\r\n\r\n<ul>\r\n	<li><strong>Если </strong>есть метод toString()<strong> и </strong>он возвращает простое значение, <strong>то </strong>оно преобр. в строку</li>\r\n	<li><strong>Иначе если </strong>есть метод valueOf() <strong>и</strong> он возвращает простое значение, то оно преобр. в строку</li>\r\n	<li><strong>Иначе </strong>TypeError</li>\r\n</ul>\r\n\r\n<p><strong>Преобразование объекта в число </strong>: то же, но первой является попытка применить метод valueOf().</p>\r\n\r\n<p><strong>Преобразование объекта Date:</strong></p>\r\n\r\n<p>var now = new Date(); &nbsp;&nbsp; // Создать объект Date<br />\r\ntypeof (now +1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;строка&quot;: + преобразует дату в строку<br />\r\ntypeof (now - 1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;число&quot;: - выполнит преобразование объекта в число<br />\r\nnow == now.toString() &nbsp; // =&gt; true: неявное и явное преобразование в строку<br />\r\nnow &gt; (now -1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: &gt; преобразует объект Date в число</p>\r\n\r\n<p>&nbsp;</p>'),
(116, 103, 'Объявление переменных', '<ul>\r\n	<li>используется <strong>var</strong><br />\r\n	var i;<br />\r\n	var sum;</li>\r\n	<li>в оном операторе <strong>несколько </strong>переменных<br />\r\n	var i, sum;</li>\r\n	<li>совмещение с <strong>инициализацией</strong><br />\r\n	var message = &quot;hello&quot;;<br />\r\n	var i = 0, j = 0, k = 0;</li>\r\n	<li>если переменная <strong>не инициализирована</strong>, то undefined</li>\r\n	<li>допускается <strong>повторное </strong>объявление</li>\r\n	<li><strong>чтение необъявленной</strong> переменной - ошибка</li>\r\n	<li>в строгом режиме <strong>присвоение необъявленной</strong> переменной - ошибка</li>\r\n</ul>'),
(117, 103, 'Область видимости переменной', '<ul>\r\n	<li>Глобальные - во всей программе</li>\r\n	<li>Локальные - в функции</li>\r\n	<li>Сокрытие глобальных переменных локальными</li>\r\n	<li>без <strong>var </strong>- считается глобальной</li>\r\n	<li>Определение функции может быть вложенным, и может быть несколько вложенных уровней локальных областей видимости.</li>\r\n	<li>Переменные, объявленне внутри функции, доступны внутри всех вложенных функций.</li>\r\n	<li><strong>Подъем </strong>: переменные, объявленне внутри функции, доступны внутри функции везде, даже до объявления.</li>\r\n</ul>\r\n\r\n<p><strong>Переменные как свойства</strong></p>\r\n\r\n<ul>\r\n	<li>Глобальные переменные - являются <strong>свойствами </strong>глобального объекта</li>\r\n	<li>Локальные переменные - свойства <strong>объекта вызова</strong> ( или <strong>записи с описанием окружения</strong>) (связанного с каждым вызовом функции)</li>\r\n	<li>Если не строгий режим и переменная создается без var, то создается глобальная переменная - настраиваемое свойство глобального объекта и могут быть удалены :\r\n	<ul>\r\n		<li>var truevar = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Правильно объявленная глобальная переменная, неудаляемая.<br />\r\n		fakevar =2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Создается удаляемое свойство глобального объекта.<br />\r\n		this.fakevar2 = 3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // То же самое.<br />\r\n		delete truevar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; false: переменная не была удалена<br />\r\n		delete fakevar&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: переменная удалена<br />\r\n		delete this.fakevar2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: переменная удалена</li>\r\n	</ul>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Цепочки областей видимости</h3>\r\n\r\n<ul>\r\n	<li>В JS - <strong>лексическая </strong>область видимости переменной (согласно исходного кода программы)</li>\r\n	<li><strong>Глобальные </strong>переменные определены для всей программы</li>\r\n	<li><strong>Локальные </strong>переменные определены для <strong>всей </strong>функции и для всех функций вложенных в эту функцию</li>\r\n	<li>Каждая фрагмент программного кода (глобальный код или тело функции) имеет <strong>цепочку областей видимости</strong> - список объектов, определяющих переменные которые видимы из кода.</li>\r\n	<li>При поиске значения переменной поднимаемся по цепочке видимости и находим его или ReferenceError</li>\r\n	<li>Определение функции фактически сохраняет ее область видимости в цепочке</li>\r\n	<li>При каждом вызове функции цепочка создается заново</li>\r\n</ul>'),
(118, 104, 'Первичные выражения', '<ul>\r\n	<li>Литералы (числа, строки, регулярные выражения, ...)</li>\r\n	<li>this - ссылка на объект</li>\r\n	<li>переменные</li>\r\n</ul>');
INSERT INTO `topics` (`topicid`, `sectionid`, `name`, `content`) VALUES
(119, 104, 'Инициализаторы объектов и массивов', '<ul>\r\n	<li>var matrix = [[1.2.3], [4.5.6], [7.8.9]]; // <strong>массив </strong>массивов (<strong>вложенные </strong>литералы массивов)</li>\r\n	<li>var sparseArray = [1, , , , 5, ];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // с неопределенными элементами (допустима завершающая запятая)</li>\r\n	<li>var р = { х:2.3, у:-1.2 };&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // <strong>Объект </strong>с 2 свойствами</li>\r\n	<li>var q = {};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Пустой объект без свойств</li>\r\n	<li>q.x = 2.3; q.y = -1.2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Теперь q имеет те же свойства, что и р</li>\r\n	<li>var rectangle = { upperLeft: { х: 2, у: 2 },lowerRight: { x: 4, у: 5 } }; // Объкт с объектами (<strong>вложенные</strong> литералы объектов)</li>\r\n	<li>Инициализаторы могут быть <strong>произвольными выражениями</strong>, имена свойств могут быть <strong>строками </strong>а не идентификаторами\r\n	<ul>\r\n		<li>var side = 1;<br />\r\n		var square = { &quot;upperLeft&quot;: { x: p.x, у: р.у },<br />\r\n		&quot;lowerRight&quot;: { x: p.x + side, у: р.у + side}};</li>\r\n	</ul>\r\n	</li>\r\n</ul>'),
(120, 104, 'Выражения определения функций', '<p>Определение функции является выражением</p>\r\n\r\n<p><span style="color:#006400">// Эта функция возвращает квадрат переданного ей значения</span><br />\r\nvar square = function(x) { return x * x; }</p>'),
(121, 104, 'Выражения обращения к свойствам', '<p>выражение . идентификатор<br />\r\nвыражение [ выражение ]</p>'),
(122, 104, 'Выражения вызова', '<p>Вызов функции или метода.</p>'),
(124, 104, 'Операторы', '<ul>\r\n	<li>++, --,&nbsp; - (унарный), +(преобразование в число), ~, !, delete, typeof, void</li>\r\n	<li>*, /, %</li>\r\n	<li>+, -</li>\r\n	<li>&lt;&lt;, &gt;&gt;, &gt;&gt;&gt;</li>\r\n	<li>&lt;, &lt;=, &gt;, &gt;=, instanceof, in (левое выражение - имя свойства правого)</li>\r\n	<li>==, !=, ===, !==</li>\r\n	<li>&amp;</li>\r\n	<li>^</li>\r\n	<li>|</li>\r\n	<li>&amp;&amp;</li>\r\n	<li>||</li>\r\n	<li>? :</li>\r\n	<li>=, *=, +=, ...</li>\r\n	<li>, (отбросить первый операнд, вернуть второй)</li>\r\n</ul>'),
(125, 104, 'Вычисление выражений', '<ul>\r\n	<li><strong>eval</strong>(&quot;3+2&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 5</li>\r\n	<li>без оптимизации</li>\r\n	<li>возвращает значение последнего выражения или undefined</li>\r\n	<li>использует окружение программного кода, может изменять и добавлять переменные и функции</li>\r\n	<li>непрямые вызовы (под другим именем) выполняют код в глобальном контексте, можно определять новые глобальные переменные и функции и изменять глобальные переменные, но нельзя изменять локальные.\r\n	<ul>\r\n		<li>var geval = eval;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Другое имя eval для вызова в глобальном контексте<br />\r\n		var х = &quot;global&quot;, у = &quot;global&quot;; // Две глобальные переменные<br />\r\n		function f() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Вызывает eval в локальном контексте<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var х = &quot;local&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Определение локальной переменной<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eval(&quot;x += &#39;changed&#39;;&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Прямой вызов eval изменит локальную переменную<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Вернет измененную локальную переменную<br />\r\n		}<br />\r\n		function g() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Вызывает eval в глобальном контексте<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var у = &quot;local&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Локальная переменная<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; geval(&quot;y += &#39;changed&#39;;&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Косвенный вызов eval изменит глоб. переменную<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return у;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Вернет неизмененную локальную переменную<br />\r\n		}<br />\r\n		console.log(f(), x);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Изменилась локальная переменная: выведет &quot;localchanged global&quot;:<br />\r\n		console.log(g(), у);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Изменилась глобальная переменная: выведет &quot;local globalchanged&quot;:</li>\r\n	</ul>\r\n	</li>\r\n</ul>'),
(126, 105, 'Инструкции-выражения', '<ul>\r\n	<li>это выражения с побочным эффектом</li>\r\n	<li>присваивание</li>\r\n	<li>++, --</li>\r\n	<li>delete</li>\r\n	<li>вызовы функций</li>\r\n</ul>'),
(127, 105, 'Составные и пустые инструкции', '<ul>\r\n	<li>это - блок инструкций в фигурных скобках { ... } без точки с запятой</li>\r\n	<li>рассматривается как одна инструкция</li>\r\n	<li>пустая инструкция &quot;;&quot; поможет не вставлять инструкцию там где она требуется по синтаксису</li>\r\n</ul>\r\n\r\n<h3>Инструкция-объявление</h3>\r\n\r\n<ul>\r\n	<li>var</li>\r\n	<li>function</li>\r\n</ul>\r\n\r\n<h3>Условные инструкции</h3>\r\n\r\n<ul>\r\n	<li>if else</li>\r\n	<li>switch (n) {case1: ... break; default: ...}</li>\r\n</ul>\r\n\r\n<h3>Циклы</h3>\r\n\r\n<ul>\r\n	<li>while</li>\r\n	<li>do while</li>\r\n	<li>for</li>\r\n	<li>for ([var] перем in объект) ... // левостороннее выражение &lt;= <strong>имя</strong> перечислимого свойство\r\n	<ul>\r\n		<li>var о = {х:1, у:2, z:3};<br />\r\n		var a = []; var i = 0;<br />\r\n		for(a[i++] in о) /* пустое тело цикла */; // копирование имен свойств в массив</li>\r\n	</ul>\r\n	</li>\r\n</ul>\r\n\r\n<h3>Переходы</h3>\r\n\r\n<ul>\r\n	<li>метки инструкций : идентификатор: инструкция</li>\r\n	<li>имена меток могут совпадать с другими идентификаторами</li>\r\n	<li>break [имя_метки]</li>\r\n	<li>continue [имя_метки]</li>\r\n	<li>return [выражение];</li>\r\n	<li>throw выражение;</li>\r\n	<li>try {...} catch (e) {...} finally {...}</li>\r\n</ul>\r\n\r\n<h3>Прочие инструкции</h3>\r\n\r\n<ul>\r\n	<li>with (объект) ... // добавление объекта в начало области видимости</li>\r\n	<li>debugger&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // отладочные операции</li>\r\n	<li>&quot;use strict&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; переключение в строгий режим (вначале фрагмента кода: верх.уров., тело функции, строка для eval) - нельзя with, все переменные должні біть обїявлены, this в функции равно undefined а не гл.об. и т.д.</li>\r\n</ul>'),
(128, 106, 'Объект', '<ul>\r\n	<li><strong>Объект </strong>- неупорядоченная коллекция свойств (имя / значение)</li>\r\n	<li>Имена свойств - строки</li>\r\n	<li>Объекты - <strong>динамичны</strong>: можно добавлять и удалять свойства</li>\r\n	<li><strong>Все</strong>, кроме строки, числа, true, false, null и undefened, <strong>является объектом</strong></li>\r\n	<li><strong>Атрибуты свойств</strong>\r\n	<ul>\r\n		<li><strong>writable </strong>- доступность для записи</li>\r\n		<li><strong>enumerable </strong>- доступность для перечисления в for / in</li>\r\n		<li><strong>configurable </strong>- возможность настройки: удаление свойства и изменение его атрибутов</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>Атрибуты объектов</strong>\r\n	<ul>\r\n		<li><strong>prototype </strong>- ссылка на другой объект от которого наследуются свойства</li>\r\n		<li><strong>class </strong>- строка с именем класса и определяет тип объекта</li>\r\n		<li><strong>extensible </strong>- флаг разрешения добавления новых свойств в объект</li>\r\n	</ul>\r\n	</li>\r\n	<li><strong>Объект базового языка</strong> - объект или класс встроенные в язык (массивы, функции, даты, рег.выр., ...)</li>\r\n	<li><strong>Объект среды выполнения</strong> - (среда выполнения - напр. браузер) объекты клиентского JS. Может быть так же объектом базового языка</li>\r\n	<li><strong>Пользовательский объект</strong> - любой объект, созданный программно</li>\r\n	<li><strong>Собственное свойство</strong> - определено в данном объекте</li>\r\n	<li><strong>Унаследованное свойство</strong> - определено в прототипе</li>\r\n</ul>'),
(129, 106, 'Создание объектов', '<h3>Литералы объектов</h3>\r\n\r\n<p>var empty = {};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Объект без свойств<br />\r\nvar point = { х:0, у:0 }; // Два свойства<br />\r\nvar point2 = { х:point.х, у:point.у+1 };&nbsp; // Более сложные значения<br />\r\nvar book = {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &quot;main title&quot;: &quot;JavaScript&quot;&#39;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Имена свойств с пробелами<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &#39;sub-title&#39;: &quot;The Definitive Guide&quot;,&nbsp;&nbsp;&nbsp; // и дефисами, поэтому используются<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; // строковые литералы<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &quot;for&quot;: &quot;all audiences&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // for - зарезервированное слово,<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; // поэтому в кавычках<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; author: {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Значением этого свойства является<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; firstname: &quot;David&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // объект. Обратите внимание, что<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; surname: &quot;Flanagan&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // имена этих свойств без кавычек.<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n};</p>\r\n\r\n<h3>Создание объектов с помощью new</h3>\r\n\r\n<p>С помощью функции-конструктора</p>\r\n\r\n<p>var о = new Object();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Создать новый пустой объект: то же, что и {}.<br />\r\nvar a = new Аггау();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Создать пустой массив: то же, что и [].<br />\r\nvar d = new Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Создать объект Date, представляющий текущее время<br />\r\nvar г = new RegExp(&quot;js&quot;);&nbsp;&nbsp; // Создать объект RegExp для операций<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // сопоставления с шаблоном.</p>\r\n\r\n<h3>Прототипы</h3>\r\n\r\n<ul>\r\n	<li>объект наследует от прототипа его свойства</li>\r\n	<li>объекты, созданные литералами, наследуют от Object.prototype</li>\r\n	<li>объекты, созданные new, наследуются от прототипа конструктора</li>\r\n	<li>Object.prototype - не имеет прототипа (null)</li>\r\n</ul>\r\n\r\n<h3>Object.create()</h3>\r\n\r\n<ul>\r\n	<li>Создает новый объект на основе прототипа из параметра\r\n	<ul>\r\n		<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var o1 = Object.create({x:1, y:2} [,объект с дескрипторами свойств]);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// о1 наследует свойства х и у. , объкт с дескрипторами свойств как и у Object.defineProperties() - для создания свойств объекта</span></li>\r\n	</ul>\r\n	</li>\r\n</ul>'),
(130, 106, 'Получение и изменение свойств', '<ul>\r\n	<li>с помощью точки .</li>\r\n	<li>с помощью квадратных скобок [ ]</li>\r\n	<li>объекты - ассоциативные массивы, поэтому имена свойств можно вычислять</li>\r\n	<li>Наследование действует при чтении свойства и нет при записи :\r\n	<ul>\r\n		<li>При чтении свойства - подъем по дереву наследования</li>\r\n		<li>При записи - изменяется или создается собственное свойство (а унаследованное - скрывается), но проверяется наличие этого свойства в цепочке наследования для проверки его свойств (например доступность для записи)</li>\r\n	</ul>\r\n	</li>\r\n	<li>Ошибки доступа к свойствам :\r\n	<ul>\r\n		<li>Не является ошибкой попытка обращения к несуществующему свойству - undefined</li>\r\n		<li>Обращение к свойству несуществующего объекта - ошибка</li>\r\n	</ul>\r\n	</li>\r\n</ul>'),
(131, 106, 'Удаление  свойств', '<p><strong>delete </strong>удаляет только собственные свойства</p>\r\n\r\n<p><strong>delete </strong>book.author;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Теперь объект book не имеет свойства author,<br />\r\ndelete book[&quot;&#39;main title&quot;];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Теперь он не имеет свойства &quot;main title&quot;.</p>\r\n\r\n<h3>Проверка существования свойств</h3>\r\n\r\n<p><strong>с помощью in</strong></p>\r\n\r\n<p>var о = { х: 1 }<br />\r\n&quot;х&quot; in о;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // true: о имеет свойство &quot;х&quot;<br />\r\n&quot;у&quot; in о;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // false: о не имеет свойства &quot;у&quot;<br />\r\n&quot;toString&quot; in о;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // true: о наследует свойство toString</p>\r\n\r\n<p><strong>с помощью метода hasOwnProperty()</strong></p>\r\n\r\n<p>имеет ли собственное свойство</p>\r\n\r\n<p>var о = { х: 1 }<br />\r\nо.hasOwnPropertyC&#39;x&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // true: о имеет собственное свойство х<br />\r\no.hasOwnProperty(&quot;y&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // false: не имеет свойства у<br />\r\nо.hasOwnProperty(&quot;toString&quot;);&nbsp;&nbsp;&nbsp;&nbsp; // false: toString - наследуемое свойство</p>\r\n\r\n<p><strong>с помощью метода propertylsEnumerable()</strong></p>\r\n\r\n<p>имеет ли собственное перечислимое свойство</p>\r\n\r\n<p>var о = inherit({ у: 2 });<br />\r\nо.х = 1;<br />\r\nо.propertyIsEnumerable(&quot;x&quot;&quot;):&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // true: о имеет собств. перечислимое свойство х<br />\r\no.propertylsEnumerable(&quot;y&quot;);&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // false: у - унаследованное свойство, не собств.<br />\r\nObject.prototype.propertyIsEnumerable(&quot;toString&quot;); // false: неперечислимое</p>\r\n\r\n<p>&nbsp;</p>'),
(132, 106, 'Перечисление свойств', '<ul>\r\n	<li>for / in</li>\r\n	<li>Object.keys() - массив имен собственных перечислимых свойств</li>\r\n	<li>Object.getOwnPropertyNames() - имена всех собственніх свойств</li>\r\n</ul>\r\n\r\n<h2 style="text-align: center;">Методы чтения и записи свойств</h2>\r\n\r\n<p>var о = {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Обычное свойство с данными<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; data_prop: value,<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Свойство с методами доступа определяется как пара функций<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>get </strong>accessor_prop() { /* тело функции */ },<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <strong>set </strong>accessor_prop(value) { /* тело функции */ }<br />\r\n};</p>\r\n\r\n<p>&nbsp;</p>'),
(133, 106, 'Атрибуты свойств', '<ul>\r\n	<li><strong>value </strong>- значение</li>\r\n	<li><strong>writable </strong>- записываемость</li>\r\n	<li><strong>enumerable </strong>- перечислимость</li>\r\n	<li><strong>configurable </strong>- настраиваемость</li>\r\n	<li><strong>Дескриптор свойства</strong> - объект со свойствами value, writable, enumerable и configurable (для свойств с методами свойств вместо value и writable свойства get и set)</li>\r\n	<li>Получение дескриптора свойств :\r\n	<ul>\r\n		<li>// Вернет {value: 1, writable:true, enumerable:true, configurable:true}<br />\r\n		Object.<strong>getOwnPropertyDescriptor</strong>({x:1}, &quot;x&quot;);<br />\r\n		// Теперь получим свойство octet объекта random, объявленного выше.<br />\r\n		// Вернет { get: /*func*/, set:undefined, enumerable:true, configurable:true}<br />\r\n		Object.getOwnPropertyDescriptor(random, &quot;octet&quot;);<br />\r\n		// Вернет undefined для унаследованных и несуществующих свойств.<br />\r\n		Object.getOwnPropertyDescriptor({}, &quot;x&quot;); // undefined, нет такого свойства<br />\r\n		Object.getOwnPropertyDescriptor({}, &quot;toString&quot;&#39;); // undefined, унаследованное</li>\r\n	</ul>\r\n	</li>\r\n	<li>Изменение атрибута или создание свойсва с требуемым атрибутом\r\n	<ul>\r\n		<li>\r\n		<p>var о = {};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Создать пустой объект без свойств<br />\r\n		// Создать неперечислимое простое свойство х со значением 1.<br />\r\n		Object.<strong>defineProperty</strong>(o, &quot;x&quot;, { value : 1,<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writable: true,<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enumerable: false,<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; configurable: true});<br />\r\n		// Убедиться, что свойство создано и является неперечислимым<br />\r\n		о.х;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 1<br />\r\n		Object.keys(o) &nbsp; // =&gt; []<br />\r\n		// Теперь сделать свойство х доступным только для чтения<br />\r\n		Object.defineProperty(o, &quot;x&quot;, { writable: false });<br />\r\n		// Попытаться изменить значение свойства<br />\r\n		о.х = 2; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Неудача, в строгом режиме возбудит ТуреЕггог<br />\r\n		о.х&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 1<br />\r\n		// Свойство все еще доступно для настройки, его значение можно изменить так:<br />\r\n		Object.defineProperty(o, &quot;x&quot;, { value: 2 });<br />\r\n		о.х&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 2<br />\r\n		// Теперь превратить простое свойство в свойство с методами доступа<br />\r\n		Object.defineProperty(o, &quot;x&quot;, { get: function() { return 0; } });<br />\r\n		о.х&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 0</p>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n	<li>\r\n	<p>создание или изменение сразу <strong>нескольких</strong> свойств</p>\r\n\r\n	<ul>\r\n		<li>\r\n		<p>var p = <strong>Object.defineProperties</strong>({}, {<br />\r\n		х: { value: 1, writable: true, enumerable:true, configurable:true },<br />\r\n		y: { value: 1, writable: true, enumerable:true, configurable:true },<br />\r\n		r: {<br />\r\n		get: function() { return Math.sqrt(this.x*this.x + this.y*this.y) },<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp; enumerable:true,<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp; configurable:true<br />\r\n		}<br />\r\n		});</p>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n	<li>\r\n	<p>Полный набор правил настройки атрибутов объектов и атрибутов свойтв</p>\r\n\r\n	<ul>\r\n		<li>\r\n		<p>Если объект не расширяемый, то можно изменить существующие свойства, но нельзя добавить новые</p>\r\n		</li>\r\n		<li>\r\n		<p>Если свойство не доступно для настройки, нельзя изменить его атрибуты configurable и enumerable</p>\r\n		</li>\r\n		<li>\r\n		<p>Если свойство с методами доступа недоступно для настройки, нельзя изменить его методы чтения и записи и нельзя превратить его в простое свойство с данными</p>\r\n		</li>\r\n		<li>\r\n		<p>Если свойство с данными недоступно для настройки, нельзя превратить его в свойство с методами доступа</p>\r\n		</li>\r\n		<li>\r\n		<p>Если свойство с данными недоступно для настройки, нельзя изменить значение его атрибута writable с false на true, но его можно изменить с true на false</p>\r\n		</li>\r\n		<li>\r\n		<p>Если свойство с данными недоступно для настройки и для записи, нельзя изменить его значение, но если оно доступно для настройки (но не для записи), то его можно сделать доступным для записи, изменить, и снова вернуть недоступность для записи</p>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n	<li>\r\n	<p>Пример : копирование атрибутов свойств</p>\r\n\r\n	<ul>\r\n		<li>\r\n		<p><span style="color:#8B4513">/*<br />\r\n		* Добавляет неперечислимый метод extend() в Object.prototype.<br />\r\n		* Этот метод расширяет объекты возможностью копирования свойств из объекта.<br />\r\n		* переданного в аргументе. Этот метод копирует не только значение свойств,<br />\r\n		* но и <strong>все их атрибуты</strong>. Из объекта в аргументе копируются все собственные<br />\r\n		* свойства (даже недоступные для перечисления), за исключением одноименных<br />\r\n		* свойств, имеющихся в текущем объекте.<br />\r\n		*/</span><br />\r\n		Object.defineProperty(Object.prototype,<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;extend&quot;, <span style="color:#006400">// Определяется Object.prototype.extend</span><br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writable: true,<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enumerable: false, <span style="color:#006400">// Сделать неперечислимым</span><br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; configurable: true,<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value: function(o) { <span style="color:#006400">// Значением свойства является данная функция</span><br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Получить все собственные свойства, даже неперечислимые</span><br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var names = Object.getOwnPropertyNames(o);<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Обойти их в цикле</span><br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(var i = 0; i &lt; names.length; i++) {<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Пропустить свойства, уже имеющиеся в данном объекте</span><br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (names[i] in this) continue;<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Получить дескриптор свойства из о</span><br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; var desc = Object. getOwnPropertyDescriptor(o, names[i]);<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Создать с его помощью свойство в данном объекте</span><br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object.defineProperty(this, names[i], desc);<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n		});</p>\r\n\r\n		<p>&nbsp;</p>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n</ul>'),
(134, 106, 'Атрибуты объектов', '<h3>атрибут prototype</h3>\r\n\r\n<ul>\r\n	<li>это <strong>не свойство</strong> o.prototype</li>\r\n	<li>устанавливается в момент создания объекта\r\n	<ul>\r\n		<li>прототипом объекта, созданного с помощью new, является значение свойства prototype конструктора</li>\r\n		<li>прототипом объекта, созданного с помощью Object.create() становится первый аргумент этой функции (может быть и null)</li>\r\n	</ul>\r\n	</li>\r\n	<li>получение прототипа - Object.getPrototypeOf() (часто можно и как o.constructor.prototype)</li>\r\n	<li>проверка, является ли прототипом - метод p.isPrototypeOf(o)\r\n	<ul>\r\n		<li>\r\n		<p>var p = {х:1};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Определить объект-прототип.</span><br />\r\n		var о = Object.сreate(p); <span style="color:#006400">// Создать объект с этим прототипом</span>.<br />\r\n		p.isPrototypeOf(о)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; true: о наследует р</span><br />\r\n		Object.prototype.isPrototypeOf(p) <span style="color:#006400">// =&gt; true: p наследует Object.prototype</span></p>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n</ul>\r\n\r\n<h3>атрибут class</h3>\r\n\r\n<ul>\r\n	<li>строка с инфо о типе</li>\r\n	<li>нельзя изменить</li>\r\n	<li>можно получить только косвенно : методом .toString() наследуемым от Object (методом Function.call())\r\n	<ul>\r\n		<li>\r\n		<p><span style="color:#8B4513">function classof(o) {<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (о === null) return &#39;&quot;Null&quot;;<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (o === undefined) return &quot;Undefined&quot;;<br />\r\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Object.prototype.toString.call(o).slice(8,-1);<br />\r\n		}</span></p>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n	<li>\r\n	<p>значения class</p>\r\n\r\n	<ul>\r\n		<li>\r\n		<p>classof(null)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &#39;Null&#39;<br />\r\n		classof(1) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &#39; Number&#39;<br />\r\n		classof(&quot;&quot;) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &#39; String&#39;<br />\r\n		classof(false) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &#39; Boolean&#39;<br />\r\n		classof({}) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &#39; Object&#39;<br />\r\n		classof([]) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &#39; Array&#39;<br />\r\n		classof(/./) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &#39; Regexp&#39;<br />\r\n		classof(new Date()) &nbsp; // =&gt; &#39; Date&#39;<br />\r\n		classof(window) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;Window&quot; (объект клиентской среды выполнения)<br />\r\n		function f() {}; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Определение собственного конструктора<br />\r\n		classof(new f()); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &#39;Object&#39;</p>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n</ul>\r\n\r\n<h3>атрибут extensible</h3>\r\n\r\n<ul>\r\n	<li>можно ли добавлять в объект новые свойства</li>\r\n	<li>получение значения extensible - Object.isExtensible(o)</li>\r\n	<li>сделать объект нерасширяемым - Object.preventExtensions(o) -&gt; возвращает объект (можно использовать в цепочках и вложенных вызовах)\r\n	<ul>\r\n		<li>нерасширяемым и ненастраиваемым - Object.seal(o) (Object.isSealed(o) - был ли вызван&nbsp; seal )</li>\r\n		<li>нерасширяемым, ненастраивемым, все собственные свойства - незаписываемые - Object.freeze(o) (Object.isFrozen(o) - был ли вызван freeze )</li>\r\n		<li>фиксируются только собственные свойства, если надо зафиксировать весь объект, то фиксируется вся цепочка прототипов.</li>\r\n	</ul>\r\n	</li>\r\n</ul>'),
(135, 106, 'Сериализация', '<ul>\r\n	<li>Преобразование объектов в строковую форму</li>\r\n	<li>JSON.stringify(o) / JSON.parse(o)\r\n	<ul>\r\n		<li>\r\n		<p><span style="color:#8B4513">о = {х:1, у:{z:[false,null,&quot;&quot;]}};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color:#006400">// Определить испытательный объект</span><br />\r\n		<span style="color:#8B4513">s = JSON.stringify(o);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color:#006400"> // s == &quot; {&quot;х&quot; :1. &quot;у&quot;: {&quot;z&quot;:[ false, null, &quot;&quot;]}}&quot;</span><br />\r\n		<span style="color:#8B4513">р = JSON.parse(s);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color:#006400">// р - глубокая копия объекта о</span></p>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n	<li>\r\n	<p>JSON не для всех значений JS</p>\r\n\r\n	<ul>\r\n		<li>\r\n		<p>объекты (только перечислимые собственные свойства), массивы, строки, конечные числа, true, false, null</p>\r\n		</li>\r\n		<li>\r\n		<p>Nan, Infinity, -Infinity -&gt; null</p>\r\n		</li>\r\n		<li>\r\n		<p>Date -&gt; формат ISO (Date.toJSON()) но JSON.parse() оставляет в строковом представлении</p>\r\n		</li>\r\n		<li>\r\n		<p>Function, RegExp, Error, undefined - не сериализуются</p>\r\n\r\n		<p>&nbsp;</p>\r\n		</li>\r\n	</ul>\r\n	</li>\r\n</ul>'),
(136, 106, 'Методы класса Object', '<ul>\r\n	<li>&nbsp;методы hasOwnProperty(), propertyIsEnumerable(), isPrototypeOf()</li>\r\n	<li>статические функции Object.create(), Object.getPrototypeOf()</li>\r\n	<li>метод toString() -&gt; строка представления объекта</li>\r\n	<li>toLocaleString() -&gt; локализованное строковое представление</li>\r\n	<li>toJSON() -&gt; хотя и нет в Object.prototype, но JSON.stringify() путается отыскать и использовать (сериализуется возвращаемое значение)</li>\r\n	<li>valueOf() -&gt; для преобразование в простой тип отличный от строки</li>\r\n</ul>'),
(137, 107, 'Создание массивов', '<ul>\r\n	<li>Литералы\r\n	<ul>\r\n		<li>var empty = [];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Пустой массив</li>\r\n		<li>var primes = [2, 3, 5, 7, 11]; // Массив с пятью числовыми элементами</li>\r\n		<li>var misc = [ 1.1, true, &quot;a&quot;, ]; // 3 элемента разных типов + завершающая запятая</li>\r\n	</ul>\r\n	</li>\r\n	<li>Конструктор\r\n	<ul>\r\n		<li>var a = new Array();</li>\r\n		<li>var a = new Аггау(10);&nbsp; // пустой массив указанной длины</li>\r\n	</ul>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Чтение и запись элементов</h2>\r\n\r\n<p><span style="color:#8B4513">var a = [&quot;world&quot;]; // Создать массив с одним элементом<br />\r\nvar value = а[0];&nbsp; // Прочитать элемент 0<br />\r\nа[1] = 3.14;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Записать значение в элемент 1<br />\r\ni = 2;<br />\r\na[i] = 3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Записать значение в элемент 2<br />\r\na[i + 1] = &quot;hello&quot;; // Записать значение в элемент 3<br />\r\na[a[i]] = а[0]; &nbsp; &nbsp; &nbsp; // Прочитать элементы 0 и 2, записать значение в элемент 3</span></p>\r\n\r\n<ul>\r\n	<li>Индексы <strong>преобразуются в строки</strong> (положительные числа до 2<sup>32</sup>-2, строки этих чисел и вещественные без дробной части) и являются <strong>свойствами </strong>объекта массива</li>\r\n	<li>чтение по несуществующему индексу -&gt; undrfined</li>\r\n</ul>\r\n\r\n<h2>Разреженные массивы</h2>\r\n\r\n<ul>\r\n	<li>свойство length больше числа элементов в массиве</li>\r\n	<li>более медленные</li>\r\n</ul>\r\n\r\n<h2>Длина массива</h2>\r\n\r\n<ul>\r\n	<li>на еденицу больше самого большого индекса</li>\r\n	<li>при уменьшении значения этого свойства - удаляется часть элементов</li>\r\n	<li>при увеличении - добавляется разреженная область в конце</li>\r\n</ul>\r\n\r\n<h2>Добавление и удаление элементов</h2>\r\n\r\n<ul>\r\n	<li>через новый индекс // a[0] = &quot;zero&quot;</li>\r\n	<li>.push(el) / pop()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a.push(&quot;zero&quot;, &quot;two&quot;)</li>\r\n	<li>.shift() / unshift(el)</li>\r\n	<li>delete a[1]</li>\r\n</ul>\r\n\r\n<h2>Обход элементов массива</h2>\r\n\r\n<ul>\r\n	<li>for (var i=0, len=a.length; i&lt;len; i++) ...</li>\r\n	<li>for (var index in arr) ... // могут попасться свойства-не индексы</li>\r\n	<li>arr.forEach(function(el)) и др. методы итераций</li>\r\n</ul>\r\n\r\n<h2>Многомерные массивы</h2>\r\n\r\n<p>массивы массивов</p>'),
(138, 107, 'Методы класса Array (ECMAScript 3)', '<ul>\r\n	<li><strong>join</strong>(&quot;,&quot;) -&gt; строка</li>\r\n	<li><strong>reverse</strong>() - не создает новый массив</li>\r\n	<li><strong>sort</strong>(func) -&gt; возвращает отсортированный массив</li>\r\n	<li><strong>concat</strong>(сп арг) -&gt; возвращает массив с объединением всех аргументов метода</li>\r\n	<li><strong>slice</strong>(от, до) -&gt; фрагмент (подмассив)</li>\r\n	<li><strong>splice</strong>(от [, до, спЗамены]) - не создает новый массив</li>\r\n	<li><strong>push</strong>(новые элементы) -&gt; новая длина массива</li>\r\n	<li><strong>pop</strong>() -&gt; el</li>\r\n	<li><strong>unshift</strong>(el), <strong>shift</strong>() - в начало со сдвигом всех элементов</li>\r\n	<li><strong>toString</strong>(), <strong>toLocaleString</strong>()</li>\r\n</ul>\r\n\r\n<h2>Методы Array (ECMAScript 5)</h2>\r\n\r\n<ul>\r\n	<li>не изменяют исходный массив</li>\r\n	<li>первый аргум, как правило, функция(эл, инд, масс)</li>\r\n	<li>второй (необяз) аргум - объект, для которого вызывается метод (this)</li>\r\n	<li><strong>forEach</strong>(функция) - применение функции к каждому элементу (нельзя прервать итерации, разве что исключение)</li>\r\n	<li><strong>map</strong>(func) -&gt; массив значений функции (не пропускает отсутств эл)</li>\r\n	<li><strong>filter</strong>(func) -&gt; массив из эл для которых значение функции истинно (или приводится к нему) (проп отсутств эл)</li>\r\n	<li><strong>every</strong>(), <strong>some</strong>() -&gt; предикаты &quot;Для всех&quot; и &quot;Существует хотя бы один такой&quot; (укороченный вариант), для пустого массива every([]) -&gt; true, some([]) -&gt; false</li>\r\n	<li><strong>reduce</strong>(func(result[,el,ind,arr]) [, нач знач]), <strong>reduceRight</strong>(result[,el,ind,arr]) [, нач знач]) - свертка</li>\r\n	<li><strong>indexOf</strong>(el[, смещение]), <strong>lastIndexOf</strong>(el) -&gt; индекс элемента (или -1)</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>'),
(139, 107, 'Тип Array', '<p>Array.isArray(a) - это массив?</p>\r\n\r\n<h2>Объекты, подобные массивам</h2>\r\n\r\n<ul>\r\n	<li>имеют свойство length</li>\r\n	<li>имеют свойства-индексы</li>\r\n	<li>все методы массивов подходят для подобных объектов (вызов Function.call())</li>\r\n</ul>\r\n\r\n<p><span style="color:#8B4513">var a = {}; </span><span style="color:#006400">// Для начала создать обычный пустой объект<br />\r\n// Добавить свойства, которые сделают его похожим на массив</span><br />\r\n<span style="color:#8B4513">var i = 0;<br />\r\nwhile(i &lt; 10) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a[i] = i * i;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i++;<br />\r\n}<br />\r\na.length = i;</span><br />\r\n<span style="color:#006400">// Теперь можно обойти свойства объекта, как если бы он был настоящим массивом</span><br />\r\n<span style="color:#8B4513">var total = 0;<br />\r\nfor(var j = 0; j &lt; a.length; j++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; total += a[j];</span></p>\r\n\r\n<h2>Строки как массивы</h2>\r\n\r\n<ul>\r\n	<li>как массивы доступные только для чтения</li>\r\n</ul>\r\n\r\n<p><span style="color:#8B4513">var s = test;<br />\r\ns.charAt(O)</span><span style="color:#006400"> // =&gt; &quot;t&quot;</span><br />\r\n<span style="color:#8B4513">s[1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color:#006400">// =&gt; &quot;e&quot;</span></p>\r\n\r\n<p><span style="color:#8B4513">s = &quot;JavaScript&quot;<br />\r\nArray.prototype.join.call(s, &quot; &quot;) </span><span style="color:#006400">// =&gt; &quot;J a v a S с г i p t&quot;</span><br />\r\n<span style="color:#8B4513">Array.prototype.filter.call(s, &nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color:#006400">// Фильтровать символы строки</span><br />\r\n<span style="color:#8B4513">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function(x) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x.match(/[~aeiou]/); </span><span style="color:#006400">// Совпадение только с согласными</span><br />\r\n<span style="color:#8B4513">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }).join(&quot;&quot;)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="color:#006400">// =&gt; &quot;JvScrpt&quot;</span></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>'),
(140, 108, 'Определение функций', '<ul>\r\n	<li>имя функции в <strong>инструкции</strong> объявления является именем переменной, в <strong>выражениях</strong> определения используется только внутри самой функции</li>\r\n	<li>параметры - локальные переменные</li>\r\n	<li>если нет return, то возврат undefined</li>\r\n</ul>\r\n\r\n<h3>Вложенные функции</h3>\r\n\r\n<ul>\r\n	<li>в них видимы локальные переменные из вмещающей функции</li>\r\n</ul>\r\n\r\n<h2>Вызов функций</h2>\r\n\r\n<ul>\r\n	<li>как функции\r\n	<ul>\r\n		<li>в строгом режиме контекст вызова - undefined</li>\r\n	</ul>\r\n	</li>\r\n	<li>как методы\r\n	<ul>\r\n		<li>контекст вызова (this) - объект до точки [или до квадратных скобок]</li>\r\n		<li>для доступа к объекту this внешней функции его надо сохранить в переменной</li>\r\n	</ul>\r\n	</li>\r\n	<li>как конструкторы (new ...)\r\n	<ul>\r\n		<li>контекст вызова созданный объект (даже если это похоже на метод: new o.m())</li>\r\n		<li>если есть return и он возвращает объект, то он заменяет автоматически сгенерированный</li>\r\n	</ul>\r\n	</li>\r\n	<li>косвенно (call(), apply())</li>\r\n</ul>'),
(141, 108, 'Аргументы и параметы', '<ul>\r\n	<li>аргументы не проверяются\r\n	<ul>\r\n		<li>если аргументов меньше параметров, то undefined</li>\r\n		<li>если меньше то в Arguments</li>\r\n	</ul>\r\n	</li>\r\n</ul>');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `sections`
--
ALTER TABLE `sections`
  ADD PRIMARY KEY (`sectionid`);

--
-- Индексы таблицы `topics`
--
ALTER TABLE `topics`
  ADD PRIMARY KEY (`topicid`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `sections`
--
ALTER TABLE `sections`
  MODIFY `sectionid` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=123;
--
-- AUTO_INCREMENT для таблицы `topics`
--
ALTER TABLE `topics`
  MODIFY `topicid` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=142;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
