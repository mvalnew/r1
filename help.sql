-- phpMyAdmin SQL Dump
-- version 4.4.15.5
-- http://www.phpmyadmin.net
--
-- Хост: 127.0.0.1:3306
-- Время создания: Апр 27 2016 г., 16:53
-- Версия сервера: 5.5.48
-- Версия PHP: 5.3.29

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `help`
--

-- --------------------------------------------------------

--
-- Структура таблицы `sections`
--

CREATE TABLE IF NOT EXISTS `sections` (
  `sectionid` int(10) unsigned NOT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `name` char(50) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=123 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `sections`
--

INSERT INTO `sections` (`sectionid`, `parent`, `name`) VALUES
(12, NULL, 'Администрирование  MySQL'),
(100, NULL, 'JavaScript'),
(101, 100, 'Введение'),
(102, 100, 'Лексическая структура'),
(103, 100, 'Типы, значения и переменные'),
(104, 100, 'Выражения и операторы'),
(105, 100, 'Инструкции'),
(106, 100, 'Объекты'),
(107, 100, 'Массивы'),
(108, 100, 'Функции'),
(109, 100, 'Классы и модули'),
(110, 100, 'Шаблоны и регулярные выражения'),
(111, 100, 'Подмножества и расширения JavaScript'),
(112, 100, 'Серверный JavaScript'),
(113, 100, 'JavaScript в браузерах'),
(114, 100, 'Объект Window'),
(115, 100, 'Работа с документами'),
(116, 100, 'CSS'),
(117, 100, 'События'),
(118, 100, 'Работа с HTTP'),
(119, 100, 'jQuery'),
(120, 100, 'Сохранение данных на стороне клиента'),
(121, 100, 'Графика и медиа на стороне клиента'),
(122, 100, 'Прикладные интерфейсы HTML5');

-- --------------------------------------------------------

--
-- Структура таблицы `topics`
--

CREATE TABLE IF NOT EXISTS `topics` (
  `topicid` int(10) unsigned NOT NULL,
  `sectionid` int(10) unsigned NOT NULL,
  `name` char(50) NOT NULL,
  `content` text
) ENGINE=InnoDB AUTO_INCREMENT=103 DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `topics`
--

INSERT INTO `topics` (`topicid`, `sectionid`, `name`, `content`) VALUES
(1, 12, 'Полномочия', '<p>Команда GRANT</p>'),
(2, 12, 'Безопасность', '<p>Опасно запускать MySQL от имени суперпользователя. Надо создать пользователя MySQL специально для запуска MySQL.</p>'),
(101, 101, 'Базовый JS', '<h3>Лексическая структура</h3>\r\n\r\n<p>- основные лексические конструкции (комментарии, точки с запятой, символы Юникода).</p>\r\n\r\n<h3>Типы данных, значения и переменные</h3>\r\n\r\n<p><span style="color:#006400">// Все, что следует за двумя символами слэша, является комментарием.<br />\r\n// Внимательно читайте комментарии: они описывают программный код JavaScript.<br />\r\n// Переменная - это символическое имя некоторого значения.<br />\r\n// Переменные объявляются с помощью ключевого слова var:</span><br />\r\nvar x; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color:#006400">// Объявление переменной с именем х.</span><br />\r\n<span style="color:#006400">// Присваивать значения переменным можно с помощью знака =</span><br />\r\nх = 0;<span style="color:#006400"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // Теперь переменная х имеет значение 0</span><br />\r\nх&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 0: В выражениях имя переменной замещается ее значением.<br />\r\n<strong>// JavaScript поддерживает значения различных типов :</strong></span><br />\r\nх = 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Числа</span>.<br />\r\nх = 0.01;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Целые и вещественные числа представлены одним типом.</span><br />\r\nх = &quot;hello world&quot;; <span style="color:#006400">// Строки текста в кавычках.</span><br />\r\nх = &#39;JavaScript&#39;; &nbsp; <span style="color:#006400">// Строки можно также заключать в апострофы</span>.<br />\r\nх = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Логические значения.</span><br />\r\nх = false;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Другое логическое значение.</span><br />\r\nх = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// null - особое значение, обозначающее &quot;нет значения&quot;.</span><br />\r\nх = undefined; <span style="color:#006400">// Значение undefined подобно значению null</span></p>\r\n\r\n<h3>Объекты и массивы</h3>\r\n\r\n<p><span style="color:#006400">// Наиболее важным типом данных в JavaScript являются объекты.<br />\r\n// Объект - это коллекция пар имя/значение или отображение строки в значение.</span><br />\r\nvar book = {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Объекты заключаются в фигурные скобки.</span><br />\r\n&nbsp;&nbsp;&nbsp; topic: &quot;JavaScript&quot;&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Свойство &quot;topic&quot; имеет значение &quot;JavaScript&quot;.</span><br />\r\n&nbsp;&nbsp;&nbsp; fat: true &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color:#006400">// Свойство &quot;fat&quot; имеет значение true.</span><br />\r\n};<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Фигурная скобка отмечает конец объекта.</span><br />\r\n<span style="color:#006400">// Доступ к свойствам объектов выполняется с помощью . или []:</span><br />\r\nbook.topic&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; &quot;JavaScript&quot;</span><br />\r\nbook[&quot;fat&quot;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; true: другой способ получить значение свойства.</span><br />\r\nbook.author = &quot;Flanagan&quot;;<span style="color:#006400"> // Создать новое свойство присваиванием.</span><br />\r\nbook.contents = {};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// {} - пустой объект без свойств.</span><br />\r\n<span style="color:#006400">// JavaScript поддерживает массивы (списки с числовыми индексами) значений:</span><br />\r\nvar primes = [2, 3, 5, 7]; <span style="color:#006400">// Массив из 4 значений, ограничивается [ и ].</span><br />\r\nprimes[0]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 2: первый элемент (с индексом 0) массива,</span><br />\r\nprimes.length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 4: количество элементов в массиве.</span><br />\r\nprimes[primes.length-1] <span style="color:#006400">// =&gt; 7: последний элемент массива.</span><br />\r\nprimes[4] = 9;<span style="color:#006400"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Добавить новый элемент присваиванием.</span><br />\r\nprimes[4] = 11;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Или изменить значение имеющегося элемента.</span><br />\r\nvar empty = [];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // [] - пустой массив без элементов.</span><br />\r\nempty.length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 0</span><br />\r\n<span style="color:#006400">// Массивы и объекты могут хранить другие массивы и объекты:</span><br />\r\nvar points := [&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Массив с 2 элементами.</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {x:0, у:0}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Каждый элемент - это объект.</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; {x:1, у:1}<br />\r\n];<br />\r\nvar data = {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Объект с 2 свойствами</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trial1: [[1.2], [3.4]]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Значение каждого свойства - это массив.</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; trial2: [[2,3], [4,5]]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400">&nbsp; // Элементами массива являются массивы.</span><br />\r\n};</p>\r\n\r\n<h3>Операторы</h3>\r\n\r\n<p><span style="color:#006400">// Операторы выполняют действия со значениями (операндами) и воспроизводят<br />\r\n// новое значение. Наиболее часто используемыми являются арифметические операторы:</span><br />\r\n3+2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // =&gt; 5: сложение<br />\r\n3-2 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // =&gt; 1: вычитание<br />\r\n3*2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 6: умножение<br />\r\n3/2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 1.5: деление<br />\r\npoints[1].x - points[0].x // =&gt; 1: можно использовать более сложные операнды<br />\r\n&quot;3&quot; + &quot;2&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; &quot;32&quot;: + складывает числа, объединяет строки<br />\r\n<span style="color:#006400">// В JavaScript имеются некоторые сокращенные формы арифметических операторов</span><br />\r\nvar count = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Объявление переменной<br />\r\ncount++;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Увеличение значения переменной на 1<br />\r\ncount--;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Уменьшение значения переменной на 1<br />\r\ncount += 2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Добавить 2: то же, что count = count + 2;<br />\r\ncount *= 3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Умножить на 3: то же, что count = count * 3;<br />\r\ncount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 6: имена переменных сами являются выражениями<br />\r\n<span style="color:#006400">// Операторы сравнения позволяют проверить два значения на равенство<br />\r\n// или неравенство, выяснить, какое значение меньше или больше, и т. д.<br />\r\n// Они возвращают значение true или false.</span><br />\r\nvar x = 2, у = 3;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Знаки = выполняют присваивание, а не сравнение<br />\r\nх == у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; false: равенство<br />\r\nх != у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: неравенство<br />\r\nх &lt; у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: меньше<br />\r\nх &lt;= у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; true: меньше или равно<br />\r\nх &gt; у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; false: больше<br />\r\nх &gt;= у&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; false: больше или равно<br />\r\n&quot;two&quot; == &quot;three&quot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; false: две разных строки</p>\r\n\r\n<h3>Инструкции и выражения</h3>\r\n\r\n<p>Выражения - вычисляют значения, выражения - изменяют состояние.<br />\r\nИнструкции заканчиваются <strong>точкой с запятой</strong>.</p>\r\n\r\n<h3>Функции</h3>\r\n\r\n<p><span style="color:#006400">// Функции - это параметризованные блоки программного кода JavaScript,<br />\r\n// которые можно вызывать многократно.</span><br />\r\nfunction plus1(x) {&nbsp;&nbsp; // Определить функцию с именем &quot;plusl&quot; и с параметром &quot;х&quot;<br />\r\n&nbsp;&nbsp;&nbsp; return х+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Вернуть значение на 1 больше полученного<br />\r\n} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; // Функции заключаются в фигурные скобки<br />\r\nplus1(у)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 4: у имеет значение 3, поэтому этот вызов вернет 3+1<br />\r\nvar square = function(x) { // Функции можно присваивать переменным<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x*x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Вычислить значение функции<br />\r\n};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Точка с запятой отмечает конец присваивания.<br />\r\nsquare(plus1(y))&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 16: вызов двух функций в одном выражении</p>\r\n\r\n<h3>Методы</h3>\r\n\r\n<p><span style="color:#006400">// Функции, присвоенные свойствам объектов, называются методами.<br />\r\n// Все объекты в JavaScript имеют методы:</span><br />\r\nvar a = []; // Создать пустой массив<br />\r\na.push(1,2,3); // Метод push() добавляет элементы в массив<br />\r\na.reverse(); // Другой метод: переставляет элементы в обратном порядке</p>\r\n\r\n<p><span style="color:#006400">// Можно определять собственные методы. Ключевое слово &quot;this&quot; ссылается на объект,<br />\r\n// в котором определен метод: в данном случае на массив points,</span><br />\r\npoints.dist = function() {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Метод вычисления расстояния между точками<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var р1 = this[0];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Первый элемент массива, относительно которого вызван метод<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var p2 = this[1]; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Второй элемент объекта &quot;this&quot;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var a = р2.х-р1.х;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Разность координат X<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var b = p2.y-p1.y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Разность координат Y<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return Math.sqrt(a*a +&nbsp;&nbsp; // Теорема Пифагора<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; b*b);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Math.sqrt( ) вычисляет корень квадратный<br />\r\n};<br />\r\npoints.dist()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // =&gt; 1.414: расстояние между 2-мя точками</p>\r\n\r\n<h3>Управляющие инструкции</h3>\r\n\r\n<p><span style="color:#006400">// В JavaScript имеются условные инструкции и инструкции циклов, синтаксически<br />\r\n// похожие на аналогичные инструкции С, C++, Java и в других языках.</span><br />\r\nfunction abs(x) {&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Функция, вычисляющая абсолютное значение</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; <strong>if</strong> (x &gt;= 0) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return x;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; <strong>else </strong>{<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; return -x;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n}</p>\r\n\r\n<p>function factorial(n) { &nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#006400"> // Функция, вычисляющая факториал</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var product = 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; <strong>while</strong>(n &gt; 1) {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; product *= n;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; n&mdash;;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; }<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return product;<br />\r\n}</p>\r\n\r\n<p>factorial(4)&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 24: 1*4*3*2</span></p>\r\n\r\n<p>function factorial2(n) {&nbsp;&nbsp;&nbsp; <span style="color:#006400">// Другая версия, использующая другой цикл</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var i, product = 1;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; <strong>for</strong>(i=2; i &lt;= n; i++)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; product *= i;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return product;<br />\r\n}<br />\r\nfactorial2(5)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color:#006400">// =&gt; 120: 1*2*3*4*5</span></p>\r\n\r\n<h3>ООП</h3>\r\n\r\n<p><span style="color:#006400">// Определение функции-конструктора для инициализации нового объекта Point</span><br />\r\nfunction Point(x.y) { &nbsp; // По соглашению имя конструкторов начинается с заглавного символа<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; this.x = х; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; // this - ссылка на инициализируемый объект<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; this.у = у; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; // Сохранить аргументы в свойствах объекта<br />\r\n} &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; // Ничего возвращать не требуется<br />\r\n<span style="color:#006400">// Чтобы создать новый экземпляр, необходимо вызвать функцию-конструктор<br />\r\n// с ключевым словом &quot;new&quot;</span><br />\r\nvar p = new Point(1, 1); // Точка на плоскости с координатами (1,1)<br />\r\n<span style="color:#006400">// Методы объектов Point определяются за счет присваивания функций свойствам<br />\r\n// объекта-прототипа, ассоциированного с функцией-конструктором.</span><br />\r\nPoint.prototype.г = function() {<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; return Math.sqrt( &nbsp;&nbsp;&nbsp;&nbsp; // Вернуть корень квадратный от х? + у7<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; this.x * this.x +&nbsp;&nbsp; // this - это объект Point, относительно которого...<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; this.у * this.у &nbsp;&nbsp;&nbsp;&nbsp; // ...вызывается метод.<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; );<br />\r\n};<br />\r\n<span style="color:#006400">// Теперь объект р типа Point (и все последующие объекты Point) наследует метод г()</span><br />\r\nр.г() &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; // =&gt; 1.414...</p>\r\n\r\n<p>&nbsp;</p>'),
(102, 101, 'Клиентский JS', '<h3>Встраивание в HTML-файлы</h3>\r\n\r\n<p><span style="color:#8B4513">\r\n&lt;head&gt;<br />\r\n&lt;script src=&quot;library. js&quot;&#39;x/script&gt; &lt;!-- подключить библиотеку JavaScript --&gt;<br />\r\n&lt;/head&gt;<br />\r\n&lt;body&gt;<br />\r\n&lt;р&gt;Это абзац HTML&lt;/p&gt;<br />\r\n&lt;script&gt;<br />\r\n// Это некоторый программный код на клиентском JavaScript,<br />\r\n// встроенный непосредственно в HTML-файл<br />\r\n&lt;/script&gt;<br />\r\n&lt;р&gt;Далее опять следует разметка HTML.&lt;/p&gt;<br />\r\n&lt;/body&gt;<br /></p>\r\n\r\n<h3>Объект Window</h3>\r\n\r\n<p>&lt;script&gt;<br />\r\nfunction moveon() {<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Вывести модальный диалог, чтобы получить ответ пользователя</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; var answer = confirm(&quot;Ready to move on?&quot;);<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Если пользователь щелкнул на кнопке &quot;OK&quot;, заставить броузер загрузить новую страницу</span><br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; if (answer) window.location = &quot;http://google.com&quot;;<br />\r\n}<br />\r\n<span style="color:#006400">// Запустить функцию, объявленную выше, через 1 минуту (60000 миллисекунд).</span><br />\r\nsetTimeout(moveon, 60000);<br />\r\n&lt;/script&gt;</p>\r\n\r\n<h3>Управление содержимым документа HTML</h3>\r\n\r\n<p><span style="color:#006400">// Выводит сообщение в специальной области для отладочных сообщений внутри документа.<br />\r\n// Если документ не содержит такой области, она создается,</span><br />\r\nfunction debug(msg) {<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Отыскать область для отладочных сообщений в документе, поиск по HTML-атрибуту id<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; </span> var log = document.getElementById(&quot;debuglog&quot;);<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Если элемент с атрибутом id=&quot;debuglog&quot; отсутствует, создать его.<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; </span> if (!log) {<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> log = document.createElement(&quot;div&quot;); // Создать элемент &lt;div&gt;<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> log.id = &quot;debuglog&quot;; // Установить атрибут id<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> log.innerHTML = &quot;&lt;h1&gt;Debug Log&lt;/h1&gt;&quot;; // Начальное содержимое<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> document.body.appendChild(log); // Добавить в конец документа<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> }<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Теперь обернуть сообщение в теги &lt;рге&gt; и добавить в элемент log<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; </span> var pre = document.createElement(&#39;&quot;pre&quot;); // Создать тег &lt;рге&gt;<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> var text = document.createTextNode(msg); // Обернуть msg в текстовый узел<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> pre.appendChild(text); // Добавить текст в тег &lt;рге&gt;<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> log.appendChild(pre); // Добавить &lt;рге&gt; в элемент log<br />\r\n}</p>\r\n\r\n<h3>Манипуляция CSS</h3>\r\n\r\n<p>function hide(e, reflow) { <span style="color:#006400">// Скрывает элемент е, изменяя его стиль</span><br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> if (reflow) { // Если 2-й аргумент true,<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> е.style.display = &quot;none&quot; // скрыть элемент и использовать<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> } // занимаемое им место<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> else { // Иначе<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> <span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> е.style.visibility = &quot;hidden&quot;; // сделать е невидимым, но оставить<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span>} // занимаемое им место пустым<br />\r\n}<br />\r\nfunction highlight(e) { <span style="color:#006400">// Выделяет е, устанавливая класс CSS</span><br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; // Просто добавляет или переопределяет HTML-атрибут class.<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; // Предполагается, что таблица стилей CSS уже содержит определение класса &quot;hilite&quot;<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp; </span> if (!e.className) e.className = &quot;hilite&quot;;<br />\r\n<span style="color:#006400">&nbsp;&nbsp;&nbsp;&nbsp; </span> else e.className += &quot; hilite&quot;;<br />\r\n}</p>\r\n\r\n<p>&nbsp;</p>');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `sections`
--
ALTER TABLE `sections`
  ADD PRIMARY KEY (`sectionid`);

--
-- Индексы таблицы `topics`
--
ALTER TABLE `topics`
  ADD PRIMARY KEY (`topicid`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `sections`
--
ALTER TABLE `sections`
  MODIFY `sectionid` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=123;
--
-- AUTO_INCREMENT для таблицы `topics`
--
ALTER TABLE `topics`
  MODIFY `topicid` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=103;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
